/**
 * Simple debug script to test SolVisualizer parsing logic
 */

// Create a simplified version of the parsing logic to test
function parseDocument(content) {
    const artifacts = new Map();
    const lines = content.split("\n");

    let currentArtifact = null;

    console.log("📝 Parsing lines:");

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        console.log(`Line ${i + 1}: "${line}"`);

        // Detect artifact definitions
        const artifactMatch = line.match(/^([A-Z][a-zA-Z0-9]*):$/);
        if (artifactMatch) {
            const artifactType = artifactMatch[1];
            console.log(`  📌 Found artifact type: ${artifactType}`);

            // Look for ID in next lines
            const artifactId = findIdInNextLines(lines, i);
            if (artifactId) {
                console.log(`  🆔 Found ID: ${artifactId}`);
                currentArtifact = {
                    type: artifactType,
                    id: artifactId,
                    line: i,
                    references: [],
                    referencedBy: [],
                };
                artifacts.set(`${artifactType}:${artifactId}`, currentArtifact);
            } else {
                console.log(`  ❌ No ID found for ${artifactType}`);
            }
            continue;
        }

        // Extract description/content for current artifact
        if (currentArtifact) {
            const descMatch = line.match(/^(?:description|content|statement):\s*(.+)$/);
            if (descMatch) {
                currentArtifact.description = descMatch[1];
                console.log(`  📄 Added description: ${descMatch[1]}`);
            }

            // Extract references
            const refMatch = line.match(/([A-Z][a-zA-Z0-9]*):([A-Z][a-zA-Z0-9]*)/g);
            if (refMatch) {
                refMatch.forEach((ref) => {
                    if (!currentArtifact.references.includes(ref)) {
                        currentArtifact.references.push(ref);
                        console.log(`  🔗 Added reference: ${ref}`);
                    }
                });
            }
        }
    }

    return artifacts;
}

function findIdInNextLines(lines, startLine) {
    console.log(`  🔍 Looking for ID starting from line ${startLine + 1}`);
    for (let i = startLine + 1; i < Math.min(startLine + 10, lines.length); i++) {
        console.log(`    Checking line ${i + 1}: "${lines[i].trim()}"`);
        const idMatch = lines[i].match(/^\s*(?:-\s*)?id:\s*([A-Za-z0-9_]+)/);
        if (idMatch) {
            console.log(`    ✅ Found ID: ${idMatch[1]}`);
            return idMatch[1];
        }
    }
    console.log(`    ❌ No ID found in next lines`);
    return null;
}

function generateMarkdownReport(artifacts) {
    return `# 📊 SOL Document Analysis Report

## 📈 Summary Statistics

- **Total Artifacts:** ${artifacts.size}
- **Processes:** ${Array.from(artifacts.values()).filter((a) => a.type === "Process").length}
- **Actors:** ${Array.from(artifacts.values()).filter((a) => a.type === "Actor").length}
- **Areas:** ${Array.from(artifacts.values()).filter((a) => a.type === "Area").length}
- **Visions:** ${Array.from(artifacts.values()).filter((a) => a.type === "Vision").length}
- **Policies:** ${Array.from(artifacts.values()).filter((a) => a.type === "Policy").length}

## 🎯 Artifacts Found

${Array.from(artifacts.values()).map(artifact =>
        `- **${artifact.type}:${artifact.id}** ${artifact.description ? `- ${artifact.description}` : ''}`
    ).join('\n')}

## 🔗 References

${Array.from(artifacts.values()).map(artifact =>
        artifact.references.length > 0 ?
            `- **${artifact.type}:${artifact.id}** references: ${artifact.references.join(', ')}` :
            ''
    ).filter(Boolean).join('\n')}

---
*Generated by SOL Visualizer Debug Script*
`;
}

// Test content
const testContent = `# SOL - Semantic Operations Language

Vision:
  - id: DigitalTransformation
    content: "Transform our organization into a digital-first entity"

Area:
  - id: TechnologyDepartment
    description: "Department responsible for all technology initiatives"
    vision: Vision:DigitalTransformation

Actor:
  - id: DevTeamLead
    type: "Technical Leader"
    capabilities: ["Team Management", "Technical Architecture", "Code Review"]
    area: Area:TechnologyDepartment

  - id: Frontend
    type: "Development Role"
    capabilities: ["React", "TypeScript", "UI/UX"]
    area: Area:TechnologyDepartment

Process:
  - id: UserRegistration
    vision: Vision:DigitalTransformation
    description: "Complete user registration workflow"
    steps:
      - Actor:Frontend → "Render registration form with validation"
      - Actor:Backend → "Validate user input and check duplicates"
    endCondition: "User successfully registered and confirmed"
`;

console.log("🧪 Testing SOL Visualizer Parsing Logic\n");

const artifacts = parseDocument(testContent);

console.log("\n📊 Final Results:");
console.log(`Found ${artifacts.size} artifacts:`);
for (const [key, artifact] of artifacts) {
    console.log(`- ${key}: ${artifact.description || 'No description'}`);
}

const report = generateMarkdownReport(artifacts);

console.log("\n📄 Generated Report:");
console.log("=".repeat(80));
console.log(report);
console.log("=".repeat(80));

// Write to file
const fs = require('fs');
fs.writeFileSync('debug-output.md', report);
console.log("\n✅ Report saved to 'debug-output.md'"); 